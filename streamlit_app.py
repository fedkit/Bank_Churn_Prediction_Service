import io

import streamlit as st
import pandas as pd
import requests
import matplotlib.pyplot as plt
import plotly.express as px

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–ü—Ä–æ–≥–Ω–æ–∑ –æ—Ç—Ç–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤", layout="wide")
st.title("üìä –ü—Ä–æ–≥–Ω–æ–∑ –æ—Ç—Ç–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤")

# –ê–¥—Ä–µ—Å FastAPI-—Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ª–æ–∫–∞–ª—å–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É 8000)
# API_URL = "http://backend:8000"

API_URL = "http://localhost:8000"

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫–∏
tab1, tab2 = st.tabs(["üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö", "üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"])

error_message = ""

with tab1:
    st.markdown(
        """
    ### üìÅ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
    –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –±–∞–Ω–∫–∞.  
    –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã —É–∫–∞–∑–∞–Ω—ã –Ω–∏–∂–µ. –ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å –±–æ–ª—å—à–∏–º —á–∏—Å–ª–æ–º —Å—Ç–æ–ª–±—Ü–æ–≤ ‚Äî –ª–∏—à–Ω–∏–µ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω—ã –≤ —Ö–æ–¥–µ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏. 
    - `CustomerId`
    - `Geography` (–∑–Ω–∞—á–µ–Ω–∏—è: France, Germany, Spain)
    - `CreditScore`, `Age`, `Tenure`, `Balance`, `NumOfProducts`, `EstimatedSalary` (—á–∏—Å–ª–æ–≤—ã–µ); `HasCrCard`, `IsActiveMember` (–±–∏–Ω–∞—Ä–Ω—ã–µ: 0 –∏–ª–∏ 1)
    - `Gender` (–∑–Ω–∞—á–µ–Ω–∏—è: Male –∏–ª–∏ Female, –ª–∏–±–æ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —É–∂–µ –±–∏–Ω–∞—Ä–Ω—ã–π `Gender_Male`)
    """
    )

    # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    sample_data = pd.DataFrame(
        {
            "CustomerId": [15634602, 15647311, 15619304, 15701354, 15601346],
            "Geography": ["France", "Spain", "France", "Germany", "France"],
            "CreditScore": [619, 608, 502, 699, 850],
            "Age": [42, 41, 42, 39, 43],
            "Tenure": [2, 1, 8, 1, 2],
            "Balance": [0.00, 83807.86, 159660.80, 0.00, 125510.82],
            "NumOfProducts": [1, 1, 3, 2, 1],
            "HasCrCard": [1, 0, 1, 1, 1],
            "IsActiveMember": [1, 1, 0, 0, 1],
            "EstimatedSalary": [101348.88, 112542.58, 113931.57, 93826.63, 79084.10],
            "Gender": ["Male", "Female", "Female", "Female", "Male"],
        }
    )
    st.markdown("#### –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:")
    st.dataframe(sample_data)

    # –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–≥—Ä—É–∂–∞—Ç—å –ª—é–±–æ–π —Ç–∏–ø —Ñ–∞–π–ª–∞
    uploaded_file = st.file_uploader("üîº –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª")

    if uploaded_file is not None:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è —Ñ–∞–π–ª–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ .csv
        if not uploaded_file.name.lower().endswith(".csv"):
            error_message = "–û—à–∏–±–∫–∞: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV!"
            st.error(error_message)
            st.stop()  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–∞–π–ª

    if uploaded_file:
        try:
            data = pd.read_csv(uploaded_file)

            # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –±–µ–∑ —É—á–µ—Ç–∞ –ø–æ–ª–∞
            model_features = ['CreditScore', 'Age', 'Tenure', 'Balance', 'NumOfProducts',
                              'HasCrCard', 'IsActiveMember', 'EstimatedSalary']

            missing_features = [col for col in model_features if col not in data.columns]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª–∏–±–æ 'Gender_Male', –ª–∏–±–æ 'Gender'
            if 'Gender_Male' not in data.columns and 'Gender' not in data.columns:
                missing_features.append('Gender_Male/Gender')

            if missing_features:
                error_message = f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏: {missing_features}"
                st.error(error_message)

            else:
                st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")

                st.markdown("### üîç –ß–∞—Å—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
                st.dataframe(data.sample(3))

                # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π CSS –¥–ª—è "–∫–∞—Ä—Ç–æ—á–µ–∫" –±–µ–∑ —Ç–µ–Ω–∏
                st.markdown(
                    """
                    <style>
                    .stat-box {
                        background-color: #FFFFFF;
                        padding: 0.25rem;
                        border-radius: 0.25rem;
                        margin-bottom: 1rem;
                    }
                    .stat-box h5 {
                        margin: 0 0 0.5rem 0;
                        font-weight: 600;
                    }
                    </style>
                    """,
                    unsafe_allow_html=True,
                )

                st.markdown("## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∞–Ω–Ω—ã–º")

                # --- –ü–ï–†–í–´–ô –†–Ø–î (3 –∫–æ–ª–æ–Ω–∫–∏) ---
                col1, col2, col3 = st.columns(3)

                with col1:
                    st.markdown("<div class='stat-box'>", unsafe_allow_html=True)

                    st.markdown(
                        "<h5>üìå –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º</h5>",
                        unsafe_allow_html=True,
                    )
                    geo_stats = (
                        data["Geography"]
                        .value_counts()
                        .rename_axis("–°—Ç—Ä–∞–Ω–∞")
                        .reset_index(name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
                    )
                    st.dataframe(geo_stats)

                    fig = px.bar(geo_stats, x='–°—Ç—Ä–∞–Ω–∞', y='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º')

                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Å–µ–π –∏ —à—Ä–∏—Ñ—Ç –ø–æ–¥–ø–∏—Å–µ–π –Ω–∞ –æ—Å—è—Ö
                    fig.update_xaxes(
                        title_text='–°—Ç—Ä–∞–Ω–∞',
                        title_font=dict(size=16, color='black'),  # –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Å–∏ X
                        tickfont=dict(size=14)  # –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –∑–Ω–∞—á–µ–Ω–∏–π –¥–µ–ª–µ–Ω–∏–π –Ω–∞ –æ—Å–∏ X
                    )
                    fig.update_yaxes(
                        title_text='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                        title_font=dict(size=16, color='black'),  # –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Å–∏ Y
                        tickfont=dict(size=14)  # –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –∑–Ω–∞—á–µ–Ω–∏–π –¥–µ–ª–µ–Ω–∏–π –Ω–∞ –æ—Å–∏ Y
                    )
                    fig.update_layout(
                        width=410,
                        height=410,
                        title_font=dict(size=18),
                    )

                    st.plotly_chart(fig)

                    st.markdown("</div>", unsafe_allow_html=True)

                with col2:
                    st.markdown("<div class='stat-box'>", unsafe_allow_html=True)
                    st.markdown(
                        "<h5>üìå –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –ø–æ–ª—É</h5>",
                        unsafe_allow_html=True,
                    )

                    data['Gender'] = data['Gender'].replace({
                        'Male': '–ú—É–∂—á–∏–Ω—ã',
                        'Female': '–ñ–µ–Ω—â–∏–Ω—ã'
                    })

                    gender_stats = (
                        data["Gender"]
                        .value_counts()
                        .rename_axis("–ü–æ–ª")
                        .reset_index(name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
                    )
                    st.dataframe(gender_stats)

                    for _ in range(2):
                        st.write("")

                    fig = px.pie(gender_stats,
                                 names='–ü–æ–ª',
                                 values='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                                 title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –ø–æ–ª—É')

                    fig.update_traces(
                        textfont=dict(size=18)
                    )
                    fig.update_layout(
                        width=410,
                        height=410,
                        title_font=dict(size=18),
                        legend=dict(font=dict(size=14))
                    )

                    st.plotly_chart(fig)

                    st.markdown("</div>", unsafe_allow_html=True)

                with col3:
                    st.markdown("<div class='stat-box'>", unsafe_allow_html=True)
                    st.markdown(
                        "<h5>üìå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É</h5>", unsafe_allow_html=True
                    )
                    age_stats = data["Age"].describe()[["mean", "min", "max"]]
                    age_stats_df = age_stats.to_frame().T.rename(
                        columns={"mean": "–°—Ä–µ–¥–Ω–µ–µ", "min": "–ú–∏–Ω–∏–º—É–º", "max": "–ú–∞–∫—Å–∏–º—É–º"}
                    )
                    st.dataframe(age_stats_df)

                    for _ in range(4):
                        st.write("")

                    fig = px.histogram(data, x="Age", nbins=20, title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤")

                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Å–µ–π –∏ —à—Ä–∏—Ñ—Ç –ø–æ–¥–ø–∏—Å–µ–π –Ω–∞ –æ—Å—è—Ö
                    fig.update_xaxes(
                        title_text='–í–æ–∑—Ä–∞—Å—Ç',
                        title_font=dict(size=16, color='black'),  # –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Å–∏ X
                        tickfont=dict(size=14)  # –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –∑–Ω–∞—á–µ–Ω–∏–π –¥–µ–ª–µ–Ω–∏–π –Ω–∞ –æ—Å–∏ X
                    )
                    fig.update_yaxes(
                        title_text='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                        title_font=dict(size=16, color='black'),  # –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Å–∏ Y
                        tickfont=dict(size=14)  # –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –∑–Ω–∞—á–µ–Ω–∏–π –¥–µ–ª–µ–Ω–∏–π –Ω–∞ –æ—Å–∏ Y
                    )
                    fig.update_layout(
                        width=410,
                        height=410,
                        title_font=dict(size=18),
                    )

                    st.plotly_chart(fig)

                    st.markdown("</div>", unsafe_allow_html=True)

                # --- –í–¢–û–†–û–ô –†–Ø–î (3 –∫–æ–ª–æ–Ω–∫–∏) ---
                col4, col5, col6 = st.columns(3)
                with col4:
                    st.markdown("<div class='stat-box'>", unsafe_allow_html=True)
                    st.markdown(
                        "<h5>üìå –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤</h5>",
                        unsafe_allow_html=True,
                    )
                    prod_stats = (
                        data["NumOfProducts"]
                        .value_counts()
                        .rename_axis("–ö–æ–ª-–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
                        # .reset_index(name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
                    )
                    prod_stats.rename('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',inplace=True)

                    st.dataframe(prod_stats)

                    fig = px.bar(x=prod_stats.index, y=prod_stats.values,
                                 title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –∫–æ–ª-–≤—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤')

                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Å–µ–π –∏ —à—Ä–∏—Ñ—Ç –ø–æ–¥–ø–∏—Å–µ–π –Ω–∞ –æ—Å—è—Ö
                    fig.update_xaxes(
                        title_text='–ö–æ–ª-–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤',
                        title_font=dict(size=16, color='black'),  # –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Å–∏ X
                        tickfont=dict(size=14)  # –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –∑–Ω–∞—á–µ–Ω–∏–π –¥–µ–ª–µ–Ω–∏–π –Ω–∞ –æ—Å–∏ X
                    )
                    fig.update_yaxes(
                        title_text='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                        title_font=dict(size=16, color='black'),  # –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Å–∏ Y
                        tickfont=dict(size=14)  # –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –∑–Ω–∞—á–µ–Ω–∏–π –¥–µ–ª–µ–Ω–∏–π –Ω–∞ –æ—Å–∏ Y
                    )
                    fig.update_layout(
                        width=410,
                        height=410,
                        title_font=dict(size=18),
                    )

                    st.plotly_chart(fig)

                    st.markdown("</div>", unsafe_allow_html=True)

                with col5:
                    st.markdown("<div class='stat-box'>", unsafe_allow_html=True)
                    st.markdown(
                        "<h5>üìå –ö–ª–∏–µ–Ω—Ç—ã –ø–æ –Ω–∞–ª–∏—á–∏—é –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã</h5>",
                        unsafe_allow_html=True,
                    )
                    card_stats = (
                        data["HasCrCard"]
                        .replace({1: "1 (–ï—Å—Ç—å –∫–∞—Ä—Ç–∞)", 0: "0 (–ù–µ—Ç –∫–∞—Ä—Ç—ã)"})
                        .value_counts()
                        .rename_axis("–°—Ç–∞—Ç—É—Å –∫–∞—Ä—Ç—ã")
                        .reset_index(name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
                    )
                    st.dataframe(card_stats)

                    for _ in range(6):
                        st.write("")

                    fig = px.pie(card_stats, names='–°—Ç–∞—Ç—É—Å –∫–∞—Ä—Ç—ã', values='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                                 title='–ö–ª–∏–µ–Ω—Ç—ã –ø–æ –Ω–∞–ª–∏—á–∏—é –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã')

                    fig.update_traces(
                        textfont=dict(size=18)
                    )
                    fig.update_layout(
                        width=410,
                        height=410,
                        title_font=dict(size=18),
                        legend=dict(font=dict(size=14))
                    )

                    st.plotly_chart(fig)

                    st.markdown("</div>", unsafe_allow_html=True)

                with col6:
                    st.markdown("<div class='stat-box'>", unsafe_allow_html=True)
                    st.markdown(
                        "<h5>üìå –ö–ª–∏–µ–Ω—Ç—ã –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</h5>", unsafe_allow_html=True
                    )
                    active_stats = (
                        data["IsActiveMember"]
                        .replace({1: "1 (–ê–∫—Ç–∏–≤–Ω—ã–π)", 0: "0 (–ù–µ –∞–∫—Ç–∏–≤–Ω—ã–π)"})
                        .value_counts()
                        .rename_axis("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
                        .reset_index(name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
                    )
                    st.dataframe(active_stats)

                    for _ in range(6):
                        st.write("")

                    fig = px.pie(active_stats, names='–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', values='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', title='–ö–ª–∏–µ–Ω—Ç—ã –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏')

                    fig.update_traces(
                        textfont=dict(size=18)
                    )
                    fig.update_layout(
                        width=410,
                        height=410,
                        title_font=dict(size=18),
                        legend=dict(font=dict(size=14))
                    )

                    st.plotly_chart(fig)

                    st.markdown("</div>", unsafe_allow_html=True)

                # --- –¢–†–ï–¢–ò–ô –†–Ø–î (3 –∫–æ–ª–æ–Ω–∫–∏) –¥–ª—è CreditScore, Tenure, Balance ---
                col7, col8, col9 = st.columns(3)
                with col7:
                    st.markdown("<div class='stat-box'>", unsafe_allow_html=True)
                    st.markdown(
                        "<h5>üìå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫—Ä–µ–¥–∏—Ç–Ω–æ–º—É —Ä–µ–π—Ç–∏–Ω–≥—É</h5>",
                        unsafe_allow_html=True,
                    )
                    credit_stats = data["CreditScore"].describe()[["mean", "min", "max"]]
                    credit_stats_df = credit_stats.to_frame().T.rename(
                        columns={"mean": "–°—Ä–µ–¥–Ω–µ–µ", "min": "–ú–∏–Ω–∏–º—É–º", "max": "–ú–∞–∫—Å–∏–º—É–º"}
                    )
                    st.dataframe(credit_stats_df)

                    fig = px.histogram(data, x="CreditScore", nbins=20, title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞")

                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Å–µ–π –∏ —à—Ä–∏—Ñ—Ç –ø–æ–¥–ø–∏—Å–µ–π –Ω–∞ –æ—Å—è—Ö
                    fig.update_xaxes(
                        title_text='–ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥',
                        title_font=dict(size=16, color='black'),  # –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Å–∏ X
                        tickfont=dict(size=14)  # –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –∑–Ω–∞—á–µ–Ω–∏–π –¥–µ–ª–µ–Ω–∏–π –Ω–∞ –æ—Å–∏ X
                    )
                    fig.update_yaxes(
                        title_text='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                        title_font=dict(size=16, color='black'),  # –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Å–∏ Y
                        tickfont=dict(size=14)  # –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –∑–Ω–∞—á–µ–Ω–∏–π –¥–µ–ª–µ–Ω–∏–π –Ω–∞ –æ—Å–∏ Y
                    )
                    fig.update_layout(
                        width=410,
                        height=410,
                        title_font=dict(size=18),
                    )

                    st.plotly_chart(fig)

                    st.markdown("</div>", unsafe_allow_html=True)

                with col8:
                    st.markdown("<div class='stat-box'>", unsafe_allow_html=True)
                    st.markdown(
                        "<h5>üìå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ª–µ—Ç –≤ –±–∞–Ω–∫–µ</h5>",
                        unsafe_allow_html=True,
                    )
                    tenure_stats = data["Tenure"].describe()[["mean", "min", "max"]]
                    tenure_stats_df = tenure_stats.to_frame().T.rename(
                        columns={"mean": "–°—Ä–µ–¥–Ω–µ–µ", "min": "–ú–∏–Ω–∏–º—É–º", "max": "–ú–∞–∫—Å–∏–º—É–º"}
                    )
                    st.dataframe(tenure_stats_df)

                    fig = px.histogram(data, x="Tenure", nbins=10, title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–µ—Ç –≤ –±–∞–Ω–∫–µ")

                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Å–µ–π –∏ —à—Ä–∏—Ñ—Ç –ø–æ–¥–ø–∏—Å–µ–π –Ω–∞ –æ—Å—è—Ö
                    fig.update_xaxes(
                        title_text='–ö–æ–ª-–≤–æ –ª–µ—Ç –≤ –±–∞–Ω–∫–µ',
                        title_font=dict(size=16, color='black'),  # –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Å–∏ X
                        tickfont=dict(size=14)  # –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –∑–Ω–∞—á–µ–Ω–∏–π –¥–µ–ª–µ–Ω–∏–π –Ω–∞ –æ—Å–∏ X
                    )
                    fig.update_yaxes(
                        title_text='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                        title_font=dict(size=16, color='black'),  # –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Å–∏ Y
                        tickfont=dict(size=14)  # –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –∑–Ω–∞—á–µ–Ω–∏–π –¥–µ–ª–µ–Ω–∏–π –Ω–∞ –æ—Å–∏ Y
                    )
                    fig.update_layout(
                        width=410,
                        height=410,
                        title_font=dict(size=18),
                    )

                    st.plotly_chart(fig)

                    st.markdown("</div>", unsafe_allow_html=True)

                with col9:
                    st.markdown("<div class='stat-box'>", unsafe_allow_html=True)
                    st.markdown(
                        "<h5>üìå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–∞–ª–∞–Ω—Å—É –Ω–∞ —Å—á–µ—Ç–µ</h5>",
                        unsafe_allow_html=True,
                    )
                    balance_stats = data["Balance"].describe()[["mean", "min", "max"]]
                    balance_stats_df = balance_stats.to_frame().T.rename(
                        columns={"mean": "–°—Ä–µ–¥–Ω–µ–µ", "min": "–ú–∏–Ω–∏–º—É–º", "max": "–ú–∞–∫—Å–∏–º—É–º"}
                    )
                    st.dataframe(balance_stats_df)

                    fig = px.histogram(data, x="Balance", nbins=20, title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ —Å—á–µ—Ç–µ")

                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Å–µ–π –∏ —à—Ä–∏—Ñ—Ç –ø–æ–¥–ø–∏—Å–µ–π –Ω–∞ –æ—Å—è—Ö
                    fig.update_xaxes(
                        title_text='–ë–∞–ª–∞–Ω—Å –Ω–∞ —Å—á–µ—Ç–µ',
                        title_font=dict(size=16, color='black'),  # –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Å–∏ X
                        tickfont=dict(size=14)  # –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –∑–Ω–∞—á–µ–Ω–∏–π –¥–µ–ª–µ–Ω–∏–π –Ω–∞ –æ—Å–∏ X
                    )
                    fig.update_yaxes(
                        title_text='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                        title_font=dict(size=16, color='black'),  # –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Å–∏ Y
                        tickfont=dict(size=14)  # –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –∑–Ω–∞—á–µ–Ω–∏–π –¥–µ–ª–µ–Ω–∏–π –Ω–∞ –æ—Å–∏ Y
                    )
                    fig.update_layout(
                        width=410,
                        height=410,
                        title_font=dict(size=18),
                    )

                    st.plotly_chart(fig)

                    st.markdown("</div>", unsafe_allow_html=True)

                st.session_state[
                    "raw_data"
                ] = data  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏

        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")

with tab2:
    if "raw_data" not in st.session_state and error_message == "":
        st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤–æ –≤–∫–ª–∞–¥–∫–µ 'üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö'")
    elif error_message != "":
        st.warning(error_message)
    else:
        data = st.session_state["raw_data"]

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞–∫–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (—Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π)
        payload = {"clients": data.to_dict(orient="records")}

        try:
            response = requests.post(f"{API_URL}/predict_batch", json=payload)
            if response.status_code == 200:
                results = response.json()
            else:
                st.error(f"–û—à–∏–±–∫–∞: {response.text}")
                results = None
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            results = None

        if results:
            final_results = pd.DataFrame(results)
            st.success("‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")

            # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            csv = final_results.to_csv(index=False).encode("utf-8")
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç (CSV)",
                data=csv,
                file_name="churn_predictions.csv",
                mime="text/csv",
                help="–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .csv"
            )

            # –î–≤–µ —Ä–∞–≤–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
            col1, col2 = st.columns(2)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤
            rename_dict = {
                "CustomerId": "ID –∫–ª–∏–µ–Ω—Ç–∞",
                "Geography": "–°—Ç—Ä–∞–Ω–∞",
                "prediction": "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ",
                "churn_probability": "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç—Ç–æ–∫–∞",
            }

            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –∫–æ–ª–æ–Ω–∫–∏
            col1, col2 = st.columns(2)

            with col1:
                st.markdown("### –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–æ–≤")
                st.markdown("**–õ–µ–≥–µ–Ω–¥–∞:** 0 ‚Äî –∫–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–Ω–µ—Ç—Å—è, 1 ‚Äî –∫–ª–∏–µ–Ω—Ç —É–π–¥—ë—Ç")
                # –°–æ–∑–¥–∞—ë–º –∫–æ–ø–∏—é —Å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–º–∏ —Å—Ç–æ–ª–±—Ü–∞–º–∏
                final_renamed = final_results.rename(columns=rename_dict)
                st.dataframe(final_renamed)

            with col2:
                st.markdown("### –¢–æ–ø-10 –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º –æ—Ç—Ç–æ–∫–∞")
                st.markdown("**–õ–µ–≥–µ–Ω–¥–∞:** 0 ‚Äî –∫–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–Ω–µ—Ç—Å—è, 1 ‚Äî –∫–ª–∏–µ–Ω—Ç —É–π–¥—ë—Ç")
                top_risk = (
                    final_results[final_results["prediction"] == 1]
                    .sort_values("churn_probability", ascending=False)
                    .head(10)
                )
                top_risk_renamed = top_risk.rename(columns=rename_dict)
                st.dataframe(top_risk_renamed)

            st.markdown("### –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –ø–æ –æ—Ç—Ç–æ–∫—É")
            churn_counts = final_results["prediction"].value_counts().sort_index()

            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∏–≥—É—Ä—ã
            fig, ax = plt.subplots(figsize=(5, 3))
            ax.bar(["–û—Å—Ç–∞–Ω–µ—Ç—Å—è", "–£–π–¥—ë—Ç"], churn_counts, color=["green", "red"])
            ax.set_ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤")

            # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º tight layout, —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–µ–∑–∞—Ç—å –ø–æ–ª—è
            buf = io.BytesIO()
            plt.savefig(buf, format="png")
            buf.seek(0)
            st.image(buf)
            plt.close(fig)

            # --- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ ---
            st.markdown("## –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")

            if "raw_data" in st.session_state:
                raw_data = st.session_state["raw_data"]
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ CustomerId
                merged = pd.merge(
                    final_results,
                    raw_data[
                        [
                            "CustomerId",
                            "Age",
                            "NumOfProducts",
                            "IsActiveMember",
                            "Balance",
                            "Gender"
                        ]
                    ],
                    on="CustomerId",
                    how="left",
                )
                # –§–æ—Ä–º–∏—Ä—É–µ–º –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã
                merged["–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞"] = pd.cut(
                    merged["Age"],
                    bins=[0, 30, 40, 50, 60, 100],
                    labels=["<30", "30-40", "40-50", "50-60", "60+"],
                )

                # –°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Ö–æ–¥–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
                geo_avg = merged.groupby("Geography")["churn_probability"].mean()
                geo_avg = geo_avg.rename("–°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Ö–æ–¥–∞")
                geo_avg = geo_avg.rename(index={'France': "–§—Ä–∞–Ω—Ü–∏—è", 'Germany': "–ì–µ—Ä–º–∞–Ω–∏—è", 'Spain': '–ò—Å–ø–∞–Ω–∏—è'})
                geo_avg.index.rename("–°—Ç—Ä–∞–Ω–∞", inplace=True)

                # –°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Ö–æ–¥–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–º –≥—Ä—É–ø–ø–∞–º
                age_avg = merged.groupby("–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞", observed=False)["churn_probability"].mean()
                age_avg = age_avg.rename("–°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Ö–æ–¥–∞")
                age_avg.index.rename("–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞", inplace=True)

                # –°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Ö–æ–¥–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤
                product_avg = merged.groupby("NumOfProducts")["churn_probability"].mean()
                product_avg = product_avg.rename("–°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Ö–æ–¥–∞")
                product_avg.index.name = '–ö–æ–ª-–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤'

                # –°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Ö–æ–¥–∞ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                active_avg = merged.groupby("IsActiveMember")["churn_probability"].mean()
                active_avg = active_avg.rename("–°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Ö–æ–¥–∞")
                active_avg = active_avg.rename(index={0: "–ù–µ –∞–∫—Ç–∏–≤–Ω—ã–π", 1: "–ê–∫—Ç–∏–≤–Ω—ã–π"})
                active_avg.index.rename("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", inplace=True)

                # –°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Ö–æ–¥–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º –±–∞–ª–∞–Ω—Å–∞
                bins = [-1, 0, 10000, 50000, 100000, merged["Balance"].max()]
                labels = ["0", "0-10000", "10000-50000", "50000-100000", "100000+"]
                merged["–ë–∞–ª–∞–Ω—Å –≥—Ä—É–ø–ø—ã"] = pd.cut(merged["Balance"], bins=bins, labels=labels)
                balance_avg = merged.groupby("–ë–∞–ª–∞–Ω—Å –≥—Ä—É–ø–ø—ã")["churn_probability"].mean()
                balance_avg = balance_avg.rename("–°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Ö–æ–¥–∞")
                balance_avg.index.rename("–ë–∞–ª–∞–Ω—Å", inplace=True)

                # –°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Ö–æ–¥–∞ –ø–æ –ø–æ–ª—É
                gender_avg = merged.groupby("Gender")["churn_probability"].mean()
                gender_avg = gender_avg.rename("–°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Ö–æ–¥–∞")
                gender_avg = gender_avg.rename(index={'Female': "–ñ–µ–Ω—Å–∫–∏–π", 'Male': "–ú—É–∂—Å–∫–æ–π"})
                gender_avg.index.rename("–ü–æ–ª", inplace=True)

                # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –∫ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É —Ç–∏–ø—É –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
                age_avg.index = age_avg.index.astype(str)
                balance_avg.index = balance_avg.index.astype(str)

                st.markdown(
                    '<h3 style="color: #2E86C1;">–°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Ö–æ–¥–∞</h3>',
                    unsafe_allow_html=True,
                )

                # –ü–µ—Ä–≤—ã–π —Ä—è–¥: –ø–æ —Å—Ç—Ä–∞–Ω–∞–º, –ø–æ –ø–æ–ª—É, –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                col_avg1, col_avg2, col_avg3 = st.columns(3)
                with col_avg1:
                    st.markdown("#### –ü–æ —Å—Ç—Ä–∞–Ω–∞–º")
                    st.dataframe(geo_avg)
                    geo_df = geo_avg.reset_index()

                    fig = px.pie(geo_df,
                                 names='–°—Ç—Ä–∞–Ω–∞',
                                 values='–°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Ö–æ–¥–∞',
                                 title='–°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Ö–æ–¥–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º'
                                 )

                    fig.update_traces(
                        textfont=dict(size=18)
                    )
                    fig.update_layout(
                        width=410,
                        height=410,
                        title_font=dict(size=18),
                        legend=dict(font=dict(size=14))
                    )

                    st.plotly_chart(fig)

                with col_avg2:
                    st.markdown("#### –ü–æ –ø–æ–ª—É")
                    st.dataframe(gender_avg)
                    gender_df = gender_avg.reset_index()

                    for _ in range(2):
                        st.write("")

                    fig = px.pie(gender_df,
                                 names='–ü–æ–ª',
                                 values='–°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Ö–æ–¥–∞',
                                 title='–°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Ö–æ–¥–∞ –ø–æ –ø–æ–ª—É'
                                 )

                    fig.update_traces(
                        textfont=dict(size=18)
                    )
                    fig.update_layout(
                        width=410,
                        height=410,
                        title_font=dict(size=18),
                        legend=dict(font=dict(size=14))
                    )

                    st.plotly_chart(fig)

                with col_avg3:
                    st.markdown("#### –ü–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
                    st.dataframe(active_avg)
                    active_df = active_avg.reset_index()

                    for _ in range(2):
                        st.write("")

                    fig = px.pie(active_df,
                                 names='–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
                                 values='–°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Ö–æ–¥–∞',
                                 title='–°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Ö–æ–¥–∞ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'
                                 )

                    fig.update_traces(
                        textfont=dict(size=18)
                    )
                    fig.update_layout(
                        width=410,
                        height=410,
                        title_font=dict(size=18),
                        legend=dict(font=dict(size=14))
                    )

                    st.plotly_chart(fig)

                # –í—Ç–æ—Ä–æ–π —Ä—è–¥: –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–º –≥—Ä—É–ø–ø–∞–º, –ø–æ –≥—Ä—É–ø–ø–∞–º –±–∞–ª–∞–Ω—Å–∞, –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤
                col_new1, col_new2, col_new3 = st.columns(3)
                with col_new1:
                    st.markdown("#### –ü–æ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–º –≥—Ä—É–ø–ø–∞–º")
                    st.dataframe(age_avg)
                    age_df = age_avg.reset_index()
                    fig_age = px.bar(
                        age_df,
                        x="–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞",
                        y="–°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Ö–æ–¥–∞",
                        title="–°—Ä–µ–¥–Ω—è—è –≤–µ—Ä-—Ç—å —É—Ö–æ–¥–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–º –≥—Ä—É–ø–ø–∞–º"
                    )
                    fig_age.update_xaxes(
                        title_text='–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞',
                        title_font=dict(size=16, color='black'),
                        tickfont=dict(size=14)
                    )
                    fig_age.update_yaxes(
                        title_text='–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å',
                        title_font=dict(size=16, color='black'),
                        tickfont=dict(size=14)
                    )
                    fig_age.update_layout(width=410, height=410, title_font=dict(size=18))
                    st.plotly_chart(fig_age)

                with col_new2:
                    st.markdown("#### –ü–æ –≥—Ä—É–ø–ø–∞–º –±–∞–ª–∞–Ω—Å–∞")
                    st.dataframe(balance_avg)
                    balance_df = balance_avg.reset_index()
                    fig_balance = px.bar(
                        balance_df,
                        x="–ë–∞–ª–∞–Ω—Å",
                        y="–°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Ö–æ–¥–∞",
                        title="–°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Ö–æ–¥–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º –±–∞–ª–∞–Ω—Å–∞"
                    )
                    fig_balance.update_xaxes(
                        title_text='–ë–∞–ª–∞–Ω—Å',
                        title_font=dict(size=16, color='black'),
                        tickfont=dict(size=14)
                    )
                    fig_balance.update_yaxes(
                        title_text='–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å',
                        title_font=dict(size=16, color='black'),
                        tickfont=dict(size=14)
                    )
                    fig_balance.update_layout(width=410, height=410, title_font=dict(size=18))
                    st.plotly_chart(fig_balance)

                with col_new3:
                    st.markdown("#### –ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
                    st.dataframe(product_avg)
                    product_df = product_avg.reset_index()

                    for _ in range(2):
                        st.write("")

                    fig_product = px.bar(
                        product_df,
                        x="–ö–æ–ª-–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤",
                        y="–°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Ö–æ–¥–∞",
                        title="–°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Ö–æ–¥–∞ –ø–æ –∫–æ–ª-–≤—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤"
                    )
                    fig_product.update_xaxes(
                        title_text='–ö–æ–ª-–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤',
                        title_font=dict(size=16, color='black'),
                        tickfont=dict(size=14)
                    )
                    fig_product.update_yaxes(
                        title_text='–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å',
                        title_font=dict(size=16, color='black'),
                        tickfont=dict(size=14)
                    )
                    fig_product.update_layout(width=410, height=410, title_font=dict(size=18))
                    st.plotly_chart(fig_product)

                # –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
                countries = ["France", "Germany", "Spain"]
                importances_list = []
                for country in countries:
                    response = requests.get(
                        f"{API_URL}/feature_importances", params={"country": country}
                    )
                    if response.status_code == 200:
                        fi = (
                            response.json()
                        )  # fi ‚Äî —Å–ª–æ–≤–∞—Ä—å: { "–ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥": value, ... }
                        # –ü—Ä–∏–≤–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏—è –∫ float, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                        fi = {k: float(v) for k, v in fi.items()}
                        df = pd.DataFrame(
                            {
                                "Feature": list(fi.keys()),
                                "Importance": list(fi.values()),
                            }
                        )
                        df["Country"] = country
                        importances_list.append(df)
                    else:
                        st.warning(
                            f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è {country}"
                        )

                if importances_list:
                    combined_importance = pd.concat(
                        importances_list, axis=0, ignore_index=True
                    )
                    wide_importance = combined_importance.pivot(
                        index="Feature", columns="Country", values="Importance"
                    ).fillna(0)
                    wide_importance["Mean Importance"] = wide_importance.mean(axis=1)
                    wide_importance = wide_importance.sort_values(
                        by="Mean Importance", ascending=False
                    )
                    wide_importance_for_table = wide_importance.rename(
                        columns={
                            "France": "–§—Ä–∞–Ω—Ü–∏—è",
                            "Germany": "–ì–µ—Ä–º–∞–Ω–∏—è",
                            "Spain": "–ò—Å–ø–∞–Ω–∏—è",
                            "Mean Importance": "–°—Ä–µ–¥–Ω—è—è –≤–∞–∂–Ω–æ—Å—Ç—å",
                        }
                    )
                    wide_importance_for_table.index.name = "–ü—Ä–∏–∑–Ω–∞–∫"

                    st.markdown(
                        '<h3 style="color: #2E86C1;">–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º</h3>',
                        unsafe_allow_html=True,
                    )

                    col_feat1, col_feat2 = st.columns(2)
                    st.markdown("#### –¢–∞–±–ª–∏—Ü–∞")
                    st.dataframe(wide_importance_for_table)
                    st.markdown("#### –ì—Ä–∞—Ñ–∏–∫")
                    fig3, ax3 = plt.subplots(figsize=(10, 6))
                    plot_data = wide_importance.drop(columns="Mean Importance")
                    plot_data.plot(kind="barh", stacked=True, ax=ax3, edgecolor="white")
                    ax3.set_title("–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º", fontsize=16)
                    ax3.set_xlabel("–í–∞–∂–Ω–æ—Å—Ç—å", fontsize=14)
                    ax3.set_ylabel("–ü—Ä–∏–∑–Ω–∞–∫", fontsize=14)
                    ax3.grid(True, axis="x", linestyle="--", alpha=0.7)
                    for container in ax3.containers:
                        ax3.bar_label(
                            container,
                            fmt="%.2f",
                            label_type="center",
                            fontsize=10,
                            color="black",
                        )
                    plt.tight_layout()
                    buf3 = io.BytesIO()
                    plt.savefig(buf3, format="png", bbox_inches="tight")
                    buf3.seek(0)
                    st.image(buf3)
                    plt.close(fig3)
                else:
                    st.error(
                        "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –Ω–∏ –¥–ª—è –æ–¥–Ω–æ–π –∏–∑ —Å—Ç—Ä–∞–Ω."
                    )
            else:
                st.warning("–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        else:
            st.warning("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
